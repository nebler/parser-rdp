// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syntax_tree.proto

#ifndef PROTOBUF_INCLUDED_syntax_5ftree_2eproto
#define PROTOBUF_INCLUDED_syntax_5ftree_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_syntax_5ftree_2eproto 

namespace protobuf_syntax_5ftree_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_syntax_5ftree_2eproto
namespace syntax_tree {
class ASTNode;
class ASTNodeDefaultTypeInternal;
extern ASTNodeDefaultTypeInternal _ASTNode_default_instance_;
class SyntaxTree;
class SyntaxTreeDefaultTypeInternal;
extern SyntaxTreeDefaultTypeInternal _SyntaxTree_default_instance_;
}  // namespace syntax_tree
namespace google {
namespace protobuf {
template<> ::syntax_tree::ASTNode* Arena::CreateMaybeMessage<::syntax_tree::ASTNode>(Arena*);
template<> ::syntax_tree::SyntaxTree* Arena::CreateMaybeMessage<::syntax_tree::SyntaxTree>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace syntax_tree {

enum ASTNode_NodeType {
  ASTNode_NodeType_FUNCTION = 0,
  ASTNode_NodeType_VARIABLE = 1,
  ASTNode_NodeType_LITERAL = 2,
  ASTNode_NodeType_OPERATOR = 3,
  ASTNode_NodeType_ASTNode_NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ASTNode_NodeType_ASTNode_NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ASTNode_NodeType_IsValid(int value);
const ASTNode_NodeType ASTNode_NodeType_NodeType_MIN = ASTNode_NodeType_FUNCTION;
const ASTNode_NodeType ASTNode_NodeType_NodeType_MAX = ASTNode_NodeType_OPERATOR;
const int ASTNode_NodeType_NodeType_ARRAYSIZE = ASTNode_NodeType_NodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ASTNode_NodeType_descriptor();
inline const ::std::string& ASTNode_NodeType_Name(ASTNode_NodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ASTNode_NodeType_descriptor(), value);
}
inline bool ASTNode_NodeType_Parse(
    const ::std::string& name, ASTNode_NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ASTNode_NodeType>(
    ASTNode_NodeType_descriptor(), name, value);
}
// ===================================================================

class ASTNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:syntax_tree.ASTNode) */ {
 public:
  ASTNode();
  virtual ~ASTNode();

  ASTNode(const ASTNode& from);

  inline ASTNode& operator=(const ASTNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ASTNode(ASTNode&& from) noexcept
    : ASTNode() {
    *this = ::std::move(from);
  }

  inline ASTNode& operator=(ASTNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ASTNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ASTNode* internal_default_instance() {
    return reinterpret_cast<const ASTNode*>(
               &_ASTNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ASTNode* other);
  friend void swap(ASTNode& a, ASTNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ASTNode* New() const final {
    return CreateMaybeMessage<ASTNode>(NULL);
  }

  ASTNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ASTNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ASTNode& from);
  void MergeFrom(const ASTNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASTNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ASTNode_NodeType NodeType;
  static const NodeType FUNCTION =
    ASTNode_NodeType_FUNCTION;
  static const NodeType VARIABLE =
    ASTNode_NodeType_VARIABLE;
  static const NodeType LITERAL =
    ASTNode_NodeType_LITERAL;
  static const NodeType OPERATOR =
    ASTNode_NodeType_OPERATOR;
  static inline bool NodeType_IsValid(int value) {
    return ASTNode_NodeType_IsValid(value);
  }
  static const NodeType NodeType_MIN =
    ASTNode_NodeType_NodeType_MIN;
  static const NodeType NodeType_MAX =
    ASTNode_NodeType_NodeType_MAX;
  static const int NodeType_ARRAYSIZE =
    ASTNode_NodeType_NodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeType_descriptor() {
    return ASTNode_NodeType_descriptor();
  }
  static inline const ::std::string& NodeType_Name(NodeType value) {
    return ASTNode_NodeType_Name(value);
  }
  static inline bool NodeType_Parse(const ::std::string& name,
      NodeType* value) {
    return ASTNode_NodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .syntax_tree.ASTNode children = 3;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 3;
  ::syntax_tree::ASTNode* mutable_children(int index);
  ::google::protobuf::RepeatedPtrField< ::syntax_tree::ASTNode >*
      mutable_children();
  const ::syntax_tree::ASTNode& children(int index) const;
  ::syntax_tree::ASTNode* add_children();
  const ::google::protobuf::RepeatedPtrField< ::syntax_tree::ASTNode >&
      children() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .syntax_tree.ASTNode.NodeType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::syntax_tree::ASTNode_NodeType type() const;
  void set_type(::syntax_tree::ASTNode_NodeType value);

  // @@protoc_insertion_point(class_scope:syntax_tree.ASTNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::syntax_tree::ASTNode > children_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_syntax_5ftree_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyntaxTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:syntax_tree.SyntaxTree) */ {
 public:
  SyntaxTree();
  virtual ~SyntaxTree();

  SyntaxTree(const SyntaxTree& from);

  inline SyntaxTree& operator=(const SyntaxTree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyntaxTree(SyntaxTree&& from) noexcept
    : SyntaxTree() {
    *this = ::std::move(from);
  }

  inline SyntaxTree& operator=(SyntaxTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyntaxTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyntaxTree* internal_default_instance() {
    return reinterpret_cast<const SyntaxTree*>(
               &_SyntaxTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SyntaxTree* other);
  friend void swap(SyntaxTree& a, SyntaxTree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyntaxTree* New() const final {
    return CreateMaybeMessage<SyntaxTree>(NULL);
  }

  SyntaxTree* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyntaxTree>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyntaxTree& from);
  void MergeFrom(const SyntaxTree& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyntaxTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .syntax_tree.ASTNode root = 1;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 1;
  private:
  const ::syntax_tree::ASTNode& _internal_root() const;
  public:
  const ::syntax_tree::ASTNode& root() const;
  ::syntax_tree::ASTNode* release_root();
  ::syntax_tree::ASTNode* mutable_root();
  void set_allocated_root(::syntax_tree::ASTNode* root);

  // @@protoc_insertion_point(class_scope:syntax_tree.SyntaxTree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::syntax_tree::ASTNode* root_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_syntax_5ftree_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ASTNode

// .syntax_tree.ASTNode.NodeType type = 1;
inline void ASTNode::clear_type() {
  type_ = 0;
}
inline ::syntax_tree::ASTNode_NodeType ASTNode::type() const {
  // @@protoc_insertion_point(field_get:syntax_tree.ASTNode.type)
  return static_cast< ::syntax_tree::ASTNode_NodeType >(type_);
}
inline void ASTNode::set_type(::syntax_tree::ASTNode_NodeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:syntax_tree.ASTNode.type)
}

// string name = 2;
inline void ASTNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ASTNode::name() const {
  // @@protoc_insertion_point(field_get:syntax_tree.ASTNode.name)
  return name_.GetNoArena();
}
inline void ASTNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syntax_tree.ASTNode.name)
}
#if LANG_CXX11
inline void ASTNode::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syntax_tree.ASTNode.name)
}
#endif
inline void ASTNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syntax_tree.ASTNode.name)
}
inline void ASTNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syntax_tree.ASTNode.name)
}
inline ::std::string* ASTNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:syntax_tree.ASTNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ASTNode::release_name() {
  // @@protoc_insertion_point(field_release:syntax_tree.ASTNode.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ASTNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:syntax_tree.ASTNode.name)
}

// repeated .syntax_tree.ASTNode children = 3;
inline int ASTNode::children_size() const {
  return children_.size();
}
inline void ASTNode::clear_children() {
  children_.Clear();
}
inline ::syntax_tree::ASTNode* ASTNode::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:syntax_tree.ASTNode.children)
  return children_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::syntax_tree::ASTNode >*
ASTNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:syntax_tree.ASTNode.children)
  return &children_;
}
inline const ::syntax_tree::ASTNode& ASTNode::children(int index) const {
  // @@protoc_insertion_point(field_get:syntax_tree.ASTNode.children)
  return children_.Get(index);
}
inline ::syntax_tree::ASTNode* ASTNode::add_children() {
  // @@protoc_insertion_point(field_add:syntax_tree.ASTNode.children)
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::syntax_tree::ASTNode >&
ASTNode::children() const {
  // @@protoc_insertion_point(field_list:syntax_tree.ASTNode.children)
  return children_;
}

// string value = 4;
inline void ASTNode::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ASTNode::value() const {
  // @@protoc_insertion_point(field_get:syntax_tree.ASTNode.value)
  return value_.GetNoArena();
}
inline void ASTNode::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syntax_tree.ASTNode.value)
}
#if LANG_CXX11
inline void ASTNode::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syntax_tree.ASTNode.value)
}
#endif
inline void ASTNode::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syntax_tree.ASTNode.value)
}
inline void ASTNode::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syntax_tree.ASTNode.value)
}
inline ::std::string* ASTNode::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:syntax_tree.ASTNode.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ASTNode::release_value() {
  // @@protoc_insertion_point(field_release:syntax_tree.ASTNode.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ASTNode::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:syntax_tree.ASTNode.value)
}

// -------------------------------------------------------------------

// SyntaxTree

// .syntax_tree.ASTNode root = 1;
inline bool SyntaxTree::has_root() const {
  return this != internal_default_instance() && root_ != NULL;
}
inline void SyntaxTree::clear_root() {
  if (GetArenaNoVirtual() == NULL && root_ != NULL) {
    delete root_;
  }
  root_ = NULL;
}
inline const ::syntax_tree::ASTNode& SyntaxTree::_internal_root() const {
  return *root_;
}
inline const ::syntax_tree::ASTNode& SyntaxTree::root() const {
  const ::syntax_tree::ASTNode* p = root_;
  // @@protoc_insertion_point(field_get:syntax_tree.SyntaxTree.root)
  return p != NULL ? *p : *reinterpret_cast<const ::syntax_tree::ASTNode*>(
      &::syntax_tree::_ASTNode_default_instance_);
}
inline ::syntax_tree::ASTNode* SyntaxTree::release_root() {
  // @@protoc_insertion_point(field_release:syntax_tree.SyntaxTree.root)
  
  ::syntax_tree::ASTNode* temp = root_;
  root_ = NULL;
  return temp;
}
inline ::syntax_tree::ASTNode* SyntaxTree::mutable_root() {
  
  if (root_ == NULL) {
    auto* p = CreateMaybeMessage<::syntax_tree::ASTNode>(GetArenaNoVirtual());
    root_ = p;
  }
  // @@protoc_insertion_point(field_mutable:syntax_tree.SyntaxTree.root)
  return root_;
}
inline void SyntaxTree::set_allocated_root(::syntax_tree::ASTNode* root) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete root_;
  }
  if (root) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      root = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    
  } else {
    
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:syntax_tree.SyntaxTree.root)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace syntax_tree

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::syntax_tree::ASTNode_NodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::syntax_tree::ASTNode_NodeType>() {
  return ::syntax_tree::ASTNode_NodeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_syntax_5ftree_2eproto
